// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v3/dispatch)
	ApiInternalV3RunsCreate(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalV3RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV3RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV3RunsCreate(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v3/dispatch", wrapper.ApiInternalV3RunsCreate)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
