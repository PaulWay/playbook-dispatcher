// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v3/dispatch)
	ApiInternalV3RunsCreate(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalV3RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV3RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV3RunsCreate(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v3/dispatch", wrapper.ApiInternalV3RunsCreate)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
