// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v3/dispatch)
	ApiInternalV3RunsCreate(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalV3RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV3RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV3RunsCreate(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v3/dispatch", wrapper.ApiInternalV3RunsCreate)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
