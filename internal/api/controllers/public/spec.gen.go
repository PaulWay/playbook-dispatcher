// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RabW8bufH/KgT//xctIEty7FxTvarjuyBBfcnBObcHXAOHWs5KTHbJDR9sq4G+ezHD",
	"fd61V/Zdi9w7izsz5DzyN0N/5YnJC6NBe8dXX3khrMjBg6VfFypXHv+Q4BKrCq+M5iv+o7hTeciZDvka",
	"LDMps+BC5h3zhlnwwWo+4wpJvwSwOz7jWuTAVzwjgTPuki3kIkpORcg8Xz1fzngeBfPVsyX+Ujr+Op5x",
	"vyuQX2kPG7B8v5/xd2nqYOR0b7RUifDgmN8Cc15Yr/SGFcYppMDj4gc6GbOQCa9uAE+Oq2iNDDwwBx4p",
	"lYccBQnPcuGTbcN6j4YmnmpUxbZOy1GdLoN+bZx/pSCTbqja95AqDY6l9B3PvIbS4CCZ0nQ6C64w2sH8",
	"X+gFuCsyI4GvvA0wfuQorXPkwpoCrFcQDyF8V5Ff+dY4UtILH5DVBs0/zDiZC0lBo5I1HX5uUTsvTcD1",
	"TOnPjix5A9obu7tWEuWUpnHeKr3h+3pBWCt2ZKlywaw/QeKRwvldhisSoHhXr9YGzTzYoUHPsszcOpYa",
	"y1IiwUhZCweSGc1uhFUmOJZYhZ/Eoeakve43Z0fZ1Vf+/xZSvuL/t2hScRF53eJNRftGvg1ZJtYZoFpo",
	"z9VXrqul8ji9fUh6amwuPF/xEJTEU/Z4BqbOxBoyN3Wwy6AviLB9LAf2RiUwxfs+kjWc4/6kYJkSRVRT",
	"ku6JDPft5xm5TCSJCZryCBJVKKC/g8147a0Z9yqHmFSl5cbS8QFxibGxGBp9TWRT8ht3lxrO+C2srxOj",
	"ncngOrInFoQHeS3oxIWsfvzOOe6+qQT/DRnUeOQpqfvU/PvfZNt7Y/3L3dBHuM6MlWTTMYM7Y/31etex",
	"eBXRnQBrfqyES7oLuOdI2O3J6DGTSf+XQl7ClwCOXJAY7UtviKLIEFgooxefnKEC3JznIbP9YK2xcauu",
	"5i+FZNVm+xl/ZexaSQn6v7/zWZKAcxXq2agb0FjQTLAJMOWYNp4JzB2Q5OZSIO53VpaPIfCSoL1KVYSE",
	"KNeDFlRccnF3AXrjt3x1HFFQ/XMkjM+j185G9jhjWIecF3nBbrcQKzFob3fsVmAiEyefNbmDJecImfjI",
	"TtE+gwTOwTmxoTzqhwtGy5egLEiMvorww0gitK7uMZBafmRKVtaKXigRE9wJRKJYbtL16V+Wz5ZH4rtU",
	"Hp2+OJVHL5br50dSLJfiVJws1+mztsJlsRjoOgYlnlJkLurqJqQkSC2ynzrmG7D0fFizsRy8wFuPibUJ",
	"nqzwUyZ2a2M+Mxv0nJ0LjXdvwILdLeJFsIVx4OZ8xPYXhCvvPWIqMjeAS6mybiTi6g4BsWqVMETLCrGB",
	"fjtBfRAfhVUHS0fSxwnXcHeocCR9nPDCwg1ekwduUJE/ZpNeWkVXlDYby60fISKlB93bz7gY6dgCxmir",
	"AR2WLeLsh8Q9hW7Y91ai2on7fKTFm3FvvMiGIml5pKGmphPDvd131lscH5+OtpFtW1ZYL248Zsx3djNa",
	"ou4v501xen5y/OLZX5ePLvFVlr+lG76/9euQC7yPhMRKxBAGVGcoOuXhCuuCNxhzDrRvldE2HSJ2uPNg",
	"seS4naOe/k/vhYcsUx7+PO+o9ErdsXOrvEpExs7/8QOGxYQ2l7Ed6waPaO7Jh67o6jrdDyD4NH48bxje",
	"SJLQoKEJ7uaO3c/4QZvFHQ7DtuUdsa8g3MPUnWDYz7ixmwP0j2Hbx8wTSlzWtI+Gy4fD5MugI1KmhC/7",
	"pmmen0vKfadTmuC7ipTRj9hzTdHbDCn7ndoE1z9hfR6piX8M9w/CcZDVV1p9CcBUU1dCmb5xtHZr7Gdm",
	"Ixxmt8pvWQPMx5PutYl3ajfxtmbspsXgqjcsz7BjgvAW7aY0O9NOYcGpJzRj+z5xfEPJU8GSiUhAvSKE",
	"aWY9EyxPjM5yEjew1rvgi+BZYY0MCUi23mEh1XgTVUaqgZrRQ/g6vN/HAqbR84EhWeXOCWD6wBbu/lFL",
	"PSE5wCPDGcWBHq1dmZew5SFigjb9S5yOW/JXm34YV/iwzDMpEx2ofUgHMZxYPKYJuMd/ncNftkv5FByh",
	"zPWG3W5VsmWiDMBaKeWYkNKCc92G8AHt3tcJ1N37PFiL8CIm2KjxqnlEmSV8xl2gHhu3FioLFjpDtETo",
	"BDIYn3a3LoP2OPDku+Vy0EzliB7wSA4So6VjIvVgS6PQnBIBkGNY7ZUEi42UUBlIJkN89qjPVD+/fLc8",
	"fbGceK2IM53fnll/gKx63+CE3uQqfojvQ96qzYbs21TDXpBMwMj+XG71tccx2Zv3BnStOdlT4nJyuwZ8",
	"PHZQQy1uiXIOntZc2ZHO6erygipB1SRVJu+kPM2iB/K6qGZUMnm2MEr7eljmIGm/I97CmpVIChW1QKvB",
	"gWWp0pLlxiKg6Defw17mZ5orQCYxW01RTkjWwbOt2myzHXNhswHnQc6Huj0YWXtCLampxooiIYdBLlTG",
	"V/yT+Tekf7Mgt8LPE5MPJzZ1GH+vXIFYDSyVV1YiaBrN3IcPHAIE9BDVIA2JB8lulGDnmQmSncc1Y2mQ",
	"ozz1YCMb8hm/AevigY7ny/mSWoUCtCgUX/GT+XJ+gh288FuqHQtRqEVl4iNZC1rcHC9s0IQriHAz9op8",
	"SR096pgpR/U11gPs9ctuE5WNeil9Y7Kb+DTUTnk3Z1c6A4dM6AxSPThkjIMsV70k0eDVMVdg08tEYo1z",
	"LA+ZV0UGfZlvDcvBblCMsUyCDPV8GN1SgMXoiKjNb5VrJrtHTM1hzlRaAd9fkKF9/HZMOnbGhJbsJZ5S",
	"M39rmAvr5rSE0eFOOT9jRkPXMr80AUFCkADD5GV8L8Mro+4U+FmhKqx2oQhAtv8R4dfx2t6QLLrPvPvZ",
	"4Qz0JHcAQ/xXiAMIy39L2H/ovSs8Wy5/t7F+jWtHJvvv/o55cRp3GxNSn2rReuoglpNpluaJgl4FQp4L",
	"u+Mrjl6bSgZimcjKxyRkRzjFVnPxlsOXWFWJIYmT5Jh3dRoix8e49pHVXmwVYzfy7ltGeUy4Ui761Zos",
	"o64WJX+M7G2p9wb+k4PePSri3eHh3nqv+wMmx7eWGP00KGdPlZ9pAMO33hdutVgkeC3OW9dxX5HYlFPw",
	"RSlk+ShkMaCuZ/R4MfL9h/1/AgAA//9bfcmH8yUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
